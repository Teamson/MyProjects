{
  "code": "export default class JJUtils {\r\n    static httpRequest(url, params, type = 'get', completeHandler) {\r\n        var xhr = new Laya.HttpRequest();\r\n        xhr.http.timeout = 5000;\r\n        xhr.once(Laya.Event.COMPLETE, this, completeHandler);\r\n        xhr.once(Laya.Event.ERROR, this, this.httpRequest, [url, params, type, completeHandler]);\r\n        if (type == \"get\") {\r\n            xhr.send(url + '?' + params, \"\", type, \"text\");\r\n        }\r\n        else if (type == \"post\") {\r\n            xhr.send(url, JSON.stringify(params), type, \"text\");\r\n        }\r\n    }\r\n    static shuffleArr(arr) {\r\n        let i = arr.length;\r\n        while (i) {\r\n            let j = Math.floor(Math.random() * i--);\r\n            [arr[j], arr[i]] = [arr[i], arr[j]];\r\n        }\r\n        return arr;\r\n    }\r\n    static fixNodeY(node) {\r\n        node.y = node.y * Laya.stage.displayHeight / Laya.stage.designHeight;\r\n    }\r\n    static visibleDelay(node, duration = 1500) {\r\n        node.visible = false;\r\n        Laya.timer.once(duration, this, () => {\r\n            node.visible = true;\r\n        });\r\n    }\r\n    static tMove(node, x, y, t, cb) {\r\n        Laya.Tween.to(node, { x: x, y: y }, t, null, new Laya.Handler(this, () => {\r\n            cb && cb();\r\n        }));\r\n    }\r\n}\r\n",
  "references": []
}
